#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#

CL_RED="\033[31m"
CL_GRN="\033[32m"
CL_YLW="\033[33m"
CL_BLU="\033[34m"
CL_MAG="\033[35m"
CL_CYN="\033[36m"
CL_RST="\033[0m"

if [ -d $ANDROID_BUILD_TOP/vendor/cm ]
then
   TEAM=cm
fi

if [ -d $ANDROID_BUILD_TOP/vendor/osr ]
then
   TEAM=osr
fi

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

if [ -z "$OTAPACKAGE" ]; then
   OTAPACKAGE=$OUT/cm_chacha-ota-eng.${USER}.zip
fi

if [ ! -f "$OTAPACKAGE" ]; then
	echo -e $CL_RED"$OTAPACKAGE doesn't exist!"$CL_RST;
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/device/htc/chacha/releasetools/opticharger_cache
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo

# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota

cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo

# Chacha: Trim LatinIME.apk
zip -d  system/app/LatinIME.apk \
	res/drawable-hdpi \
	res/drawable-xhdpi \
	res/xml-sw600dp* \
	res/xml-sw768dp* \
	res/raw/main_cs.dict \
	res/raw/main_da.dict \
	res/raw/main_el.dict \
	res/raw/main_fi.dict \
	res/raw/main_hr.dict \
	res/raw/main_hu.dict \
	res/raw/main_iw.dict \
	res/raw/main_ka.dict \
	res/raw/main_nb.dict \
	res/raw/main_nl.dict \
	res/raw/main_pt_br.dict \
	res/raw/main_pt_pt.dict \
	res/raw/main_ru.dict \
	res/raw/main_sv.dict

# Chacha: remove unused apps off CM zip for now
( 
	# Not so useful apks
	rm system/app/CMWallpapers{.apk,.odex}
	rm system/app/Calculator{.apk,.odex}
	rm system/app/Galaxy4{.apk,.odex}
	rm system/app/HoloSpiralWallpaper{.apk,.odex}
	rm system/app/LiveWallpapers{.apk,.odex}
	rm system/app/LiveWallpapersPicker{.apk,.odex}
	rm system/app/MagicSmokeWallpapers{.apk,.odex}
	rm system/app/NoiseField{.apk,.odex}
	rm system/app/PhaseBeam{.apk,.odex}
	rm system/app/SoundRecorder{.apk,.odex}
	rm system/app/SpeechRecorder{.apk,.odex}
	rm system/app/VideoEditor{.apk,.odex}
	rm system/app/VisualizationWallpapers{.apk,.odex}

	# Not so useful tools
	rm system/xbin/nc
	rm system/xbin/vim
	rm system/xbin/tcpdump
	rm system/xbin/showslab
	rm system/xbin/htop
	
	# Videos?
	rm -r system/media/video

)  2>/dev/null

(  cd $REPACK/ota/META-INF/com/google/android
   grep -v /system/xbin/tcpdump updater-script > updater-script.2
   mv updater-script.2 updater-script
)

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .

# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop


# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# No need for recovery
rm -rf $REPACK/ota/recovery

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Determine what to name the new signed package
MODVERSION=$( sed -n -e"/ro\.${TEAM}\.version/s/^.*=//p" $REPACK/ota/system/build.prop )

OUTFILE=$OUT/${TEAM}-$MODVERSION$( [ "$BUILD_NUMBER" != "" ] && echo "-${BUILD_NUMBER}" ).zip

echo -e $CL_CYN"MODVERSION: $MODVERSION"$CL_RST

# Pack it up and sign

printf "Zipping package..."
cd $REPACK/ota

if which 7za &>/dev/null
then
   7za a -tzip -mx9 -mmt $REPACK/update.zip .
else
   zip $QUIET -r -9 $REPACK/update.zip . 
fi
cd -

echo
printf "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package

img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
echo
echo -e $CL_GRN"Package complete: $OUTFILE"$CL_RST
cat $img.md5sum
echo

exit 0
